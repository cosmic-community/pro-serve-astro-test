---
import type { Testimonial } from '../types';

export interface Props {
  testimonial: Testimonial;
  rating?: number;
}

const { testimonial } = Astro.props;
const renderStars = (rating: number) => {
  return Array.from({ length: 5 }, (_, index) => {
    const filled = index < rating ? 'text-yellow-400' : 'text-secondary-300';
    return { filled, index };
  });
};
---

<div class="bg-white rounded-lg shadow-md p-6">
  <div class="flex items-center mb-4">
    {testimonial.metadata?.client_photo && (
      <img 
        src={`${testimonial.metadata.client_photo.imgix_url}?w=120&h=120&fit=crop&auto=format,compress`}
        alt={testimonial.metadata?.client_name}
        class="w-12 h-12 rounded-full mr-4"
        loading="lazy"
      />
    )}
    
    <div>
      <h3 class="font-semibold text-gray-900">
        {testimonial.metadata?.client_name}
      </h3>
      <p class="text-sm text-gray-600">
        {testimonial.metadata?.client_title}
        {testimonial.metadata?.company && (
          <span> at {testimonial.metadata.company}</span>
        )}
      </p>
    </div>
  </div>

  {testimonial.metadata?.rating && (
    <div class="flex text-yellow-400 mb-4">
      {renderStars(Number(testimonial.metadata.rating.key)).map(({ filled, index }) => (
        <svg
          class={`w-5 h-5 ${filled ? 'text-yellow-400' : 'text-secondary-300'}`}
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            fill-rule="evenodd"
            d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"
            clip-rule="evenodd"
          />
        </svg>
      ))}
    </div>
  )}

  <blockquote class="text-gray-700 mb-4">
    "{testimonial.metadata?.testimonial}"
  </blockquote>

  {testimonial.metadata?.related_service && (
    <div class="text-sm text-primary-600">
      Service: {testimonial.metadata.related_service.metadata?.name || testimonial.metadata.related_service.title}
    </div>
  )}
</div>